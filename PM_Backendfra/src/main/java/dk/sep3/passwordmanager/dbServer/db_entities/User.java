package dk.sep3.passwordmanager.dbServer.db_entities;

import jakarta.persistence.*;

import java.io.Serializable;
import java.util.Objects;

@Entity // Assigns this class as an Entity for Spring Boot, to use as a base for its Data Persistence interface.
@Table(name="\"user\"") // Tells Spring Boot JPA, what the name of this database table is.
public class User implements Serializable
{
  @Id  // Tells Spring Boot, that this value is the primary key.
  @GeneratedValue (strategy = GenerationType.SEQUENCE, generator = "user_id_generator") // Tells Spring Boot, that the primary key is generated by the database, using a sequence, and defines the specific generator in the database to utilize.
  @SequenceGenerator(name = "user_id_generator", sequenceName = "user_id_seq", allocationSize = 1)
  private int id;

  @Column (name = "username", nullable=false) // Tells Spring Boot, that this variable has a column with the name "username" in the database, and that values in this cannot be null.
  private String username;

  @Column (name = "password", nullable=false) // Tells Spring Boot, that this variable has a column with the name "password" in the database, and that values in this cannot be null.
  private String encryptedPassword;


  // A no-args constructor, as required by the Java Data API (JPA) specifications.
  protected User() {
  }


  public User(int id, String username, String encryptedPassword) {
    setId(id);
    setUsername(username);
    setEncryptedPassword(encryptedPassword);
  }


  public int getId(){
    return id;
  }

  public void setId(int id){
    this.id = id;
  }


  public String getUsername() {
    return username;
  }


  public void setUsername(String username) {
    this.username = username;
  }


  public String getEncryptedPassword() {
    return encryptedPassword;
  }


  public void setEncryptedPassword(String password) {
    this.encryptedPassword = password;
  }


  // Required by Spring Boot JPA:
  @Override public boolean equals(Object o) {
    if (this == o)
      return true;
    if (o == null || getClass() != o.getClass())
      return false;
    User user = (User) o;
    return getId() == user.getId() && Objects.equals(getUsername(), user.getUsername()) && Objects.equals(getEncryptedPassword(), user.getEncryptedPassword());
  }


  // Required by Spring Boot JPA:
  @Override public int hashCode() {
    return Objects.hash(getId(), getUsername(), getEncryptedPassword());
  }


  @Override public String toString() {
    return "User{" + "id='" + id + "'" + "username='" + username + '\'' + ", password='" + encryptedPassword + '\'' + '}';
  }
}
