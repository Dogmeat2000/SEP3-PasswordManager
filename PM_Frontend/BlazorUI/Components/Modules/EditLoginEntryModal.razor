@using System.Security.Authentication
@using System.Security.Claims
@using ServiceLayer.Services
@using ServiceLayer.Services.LoginEntryService
@using Shared.Dtos
@inject IServiceLayer ServiceLayer
@inject ILoginEntryService LoginEntryService

@if (isVisible)
{
    <div class="modal fade show d-block" @onclick="HideModal" tabindex="-1" style="background: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog" @onclick:stopPropagation>
            <div class="modal-content">
                <div class="modal-header header">
                    <h5 class="modal-title">Update or delete Entry</h5>
                    <button type="button" class="close btn bg-white" @onclick="HideModal">&times;</button>
                </div>
                <form class="p-3">
                    <div class="form-group mb-3">
                        <label for="entryName" class="form-label">Name</label>
                        <input type="text" id="entryName" class="form-control" @bind="entryName" placeholder="Enter name"/>
                    </div>

                    <div class="form-group mb-3">
                        <label for="entryAddress" class="form-label">Website</label>
                        <input type="text" id="entryAddress" class="form-control" @bind="entryAddress" placeholder="Enter website URL"/>
                    </div>

                    <div class="form-group mb-3">
                        <label for="entryUsername" class="form-label">Username</label>
                        <input type="text" id="entryUsername" class="form-control" @bind="entryUsername" placeholder="Enter username"/>
                    </div>

                    <div class="form-group mb-3">
                        <label for="entryPassword" class="form-label">Password</label>
                        <input type="text" id="entryPassword" class="form-control" @bind="entryPassword" placeholder="Enter password"/>
                    </div>

                    <!-- Optional Category Selection -->
                    <div class="form-group mb-3">
                        <label for="category" class="form-label">Category</label>
                        <select id="category" class="form-select" @bind="entrycategory">
                            <option selected disabled>Select category</option>
                            <option>Social Media</option>
                            <option>Bank - Pension - Insurance</option>
                            <option>Other</option>
                        </select>
                    </div>
                    <div class="modal-footer">
                            @if (isLoading)
                            {
                                    <div class="spinner-border text-secondary" role="status">
                                        <span class="visually-hidden">Loading...</span>
                                    </div>
                            }

                            @if (!string.IsNullOrEmpty(errorMessage))
                            {
                                <div class="alert alert-warning" role="alert">
                                    @errorMessage
                                </div>
                            }
                        <button class="btn btn-outline-secondary" @onclick="HideModal">Cancel</button>
                        <button class="btn btn-secondary" @onclick="ConfirmDelete" @onclick:preventDefault disabled="@isLoading">Delete</button>
                        <button class="btn btn-primary" @onclick="UpdateLoginEntryAsync" @onclick:preventDefault disabled="@isLoading">Save</button>
                    </div> 
                </form>
                </div>
        </div>
    </div>
}

@if (isDeleteConfirmationVisible)
{
    <div class="modal fade show d-block" @onclick="HideDeleteConfirmation" tabindex="-1" style="background: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog" @onclick:stopPropagation>
            <div class="modal-content">
                <div class="modal-header header">
                    <h5 class="modal-title">Confirm Deletion</h5>
                    <button type="button" class="close btn bg-white" @onclick="HideDeleteConfirmation">&times;</button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete this entry?</p>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-outline-secondary" @onclick="HideDeleteConfirmation">Cancel</button>
                    <button class="btn btn-danger" @onclick="DeleteLoginEntryAsync" @onclick:preventDefault>Delete</button>
                </div>
            </div>
        </div>
    </div>
}

@if (isUpdateSuccessVisible)
{
    <div class="alert alert-success position-fixed top-0 end-0 m-3" role="alert" style="z-index: 1050;">
        Entry successfully updated!
    </div>
}

@if (isDeleteSuccessVisible)
{
    <div class="alert alert-success position-fixed top-0 end-0 m-3" role="alert" style="z-index: 1050;">
        Entry successfully deleted!
    </div>
}


@code {
    [CascadingParameter] public Task<AuthenticationState> State { get; set; }
    
    private bool isVisible = false;
    private bool isLoading = false;
    private bool isUpdateSuccessVisible = false;
    private bool isDeleteConfirmationVisible = false;
    private bool isDeleteSuccessVisible = false;
    private string errorMessage = string.Empty; 

    [Parameter]
    public LoginEntryDTO? SelectedEntry { get; set; }
    
    private string? entryName = string.Empty;
    private string? entryAddress = string.Empty;
    private string? entryUsername = string.Empty;
    private string? entryPassword = string.Empty;
    private string? entrycategory = string.Empty;
    private int? masterUserId; 

    [Parameter]
    public EventCallback<bool> OnUpdateEntrySuccess { get; set; }
    [Parameter]
    public EventCallback<bool> OnDeleteEntrySuccess { get; set; }

    protected override async Task OnInitializedAsync()
    {
        AuthenticationState authState = await State;
        ClaimsPrincipal claimsPrincipal = authState.User;
        if (claimsPrincipal.Identity is null || !claimsPrincipal.Identity.IsAuthenticated)
        {
            throw new AuthenticationException("User is not logged in"); 
        }
        
        IEnumerable<Claim> claims = claimsPrincipal.Claims;
        string userIdAsString = claims.Single(c => c.Type == "MasterUserId").Value;
        masterUserId = int.Parse(userIdAsString);
    }
    
    public void ShowModal()
    {
        if (SelectedEntry != null)
        {
            entryName = SelectedEntry.EntryName ?? "DefaultName"; 
            entryUsername = SelectedEntry.EntryUsername ?? "DefaultUsername";
            entryPassword = SelectedEntry.EntryPassword ?? "DefaultPassword";
            entryAddress = SelectedEntry.EntryAddress ?? "http://default.url";
            entrycategory = SelectedEntry.EntryCategory ?? "DefaultCategory";
            
            isVisible = true;
        }

        isVisible = true; 
        StateHasChanged();
    }
    
    private void ConfirmDelete()
    {
        isDeleteConfirmationVisible = true;
        StateHasChanged();
    }

    private void HideDeleteConfirmation()
    {
        isDeleteConfirmationVisible = false;
        StateHasChanged();
    }

    private void HideModal()
    {
        isVisible = false; 
        StateHasChanged();
    }

    private async Task UpdateLoginEntryAsync()
    {
        isLoading = true; 
        try
        {
            var entryToBeUpdated = SelectedEntry;
            entryToBeUpdated.EntryName = entryName;
            entryToBeUpdated.EntryUsername = entryUsername;
            entryToBeUpdated.EntryPassword = entryPassword;
            entryToBeUpdated.EntryCategory = entrycategory;
            entryToBeUpdated.EntryAddress = entryAddress;
            entryToBeUpdated.MasterUserId = masterUserId;

            var updatedLoginEntry = await LoginEntryService.UpdateLoginEntryAsync(entryToBeUpdated);

            if (updatedLoginEntry != null)
            {
                await OnUpdateEntrySuccess.InvokeAsync(); 
            }

            await Task.Delay(1000);
            ShowUpdateSuccessMessage();

            HideModal();
        }
        catch (Exception e)
        {
            errorMessage = "Something went wrong, try again: " + e.Message;
        }
        finally
        {
            isLoading = false; 
            StateHasChanged(); 
        }

    }

    private void ShowUpdateSuccessMessage()
    {
        isUpdateSuccessVisible = true;
        StateHasChanged();
        _ = HideUpdateSuccessMessageAfterDelay();
    }
    
    private async Task HideUpdateSuccessMessageAfterDelay()
    {
        await Task.Delay(3000);
        isUpdateSuccessVisible = false;
        StateHasChanged();
    }
    
    private void ShowDeleteSuccessMessage()
    {
        isDeleteSuccessVisible = true;
        StateHasChanged();
        _ = HideDeleteSuccessMessageAfterDelay();
    }
    
    private async Task HideDeleteSuccessMessageAfterDelay()
    {
        await Task.Delay(3000);
        isDeleteSuccessVisible = false;
        StateHasChanged();
    }
    
    private async Task DeleteLoginEntryAsync()
    {
        isLoading = true;

        LoginEntryDTO entryToBeDeleted = new LoginEntryDTO(
            SelectedEntry.id, 
            SelectedEntry.EntryUsername, 
            SelectedEntry.EntryPassword, 
            masterUserId, 
            SelectedEntry.EntryCategory, 
            SelectedEntry.EntryName, 
            SelectedEntry.EntryAddress);  
        
        try
        {
            await LoginEntryService.DeleteLoginEntryAsync(entryToBeDeleted);
            await OnDeleteEntrySuccess.InvokeAsync();
            
            await Task.Delay(1000);
            ShowDeleteSuccessMessage();

            HideDeleteConfirmation();
            HideModal();
        }
        catch (Exception e)
        {
            errorMessage = "Something went wrong, try again: " + e.Message;
        }
        finally
        {
            isLoading = false; 
            StateHasChanged();
        }
    }
}
