@using ServiceLayer.Services
@using ServiceLayer.Services.LoginEntryService
@using Shared.Dtos
@inject IServiceLayer ServiceLayer
@inject ILoginEntryService LoginEntryService

@if (isVisible)
{
    <div class="modal fade show d-block" tabindex="-1" style="background: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Update or delete Entry</h5>
                    <button type="button" class="close" @onclick="HideModal">&times;</button>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <label for="entryName">Name</label>
                        <input type="text" id="entryName" class="form-control" @bind="entryName"/>
                    </div>
                    <div class="form-group">
                        <label for="entryAddress">Website</label>
                        <input type="text" id="entryAddress" class="form-control" @bind="entryAddress"/>
                    </div>
                    <div class="form-group">
                        <label for="entryUsername">Username</label>
                        <input type="text" id="entryUsername" class="form-control" @bind="entryUsername"/>
                    </div>
                    <div class="form-group">
                        <label for="entryPassword">Password</label>
                        <input type="text" id="entryPassword" class="form-control" @bind="entryPassword"/>
                    </div>
                    @*<div class="form-group">
                    <label for="category">entryCategory</label>
                    <select id="category" class="form-control" @bind="category">
                        <option>Select</option>
                        <option>Social Media</option>
                        <option>Bank - Pension - Insurance</option>
                        <option>Other</option>
                    </select>
                </div>*@
                </div>
                <div class="modal-footer">
                    <!--<button class="btn btn-secondary" @onclick="">Delete</button>--> //TODO: Commented out because app would not launch with this line!
                    <button class="btn btn-primary" @onclick="UpdateLoginEntryAsync">Save</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private bool isVisible = false;

    private LoginEntryDTO selectedLoginEntry; 
    
    private string entryName = string.Empty;
    private string entryAddress = string.Empty;
    private string entryUsername = string.Empty;
    private string entryPassword = string.Empty;
    private string category = string.Empty;

    [Parameter]
    public EventCallback<LoginEntryDTO> OnUpdateEntrySucces { get; set; }
    public EventCallback onDeleteEntrySuccess { get; set; }

    private void Initialize()
    {
        selectedLoginEntry = new LoginEntryDTO();
        
        entryName = "";
        entryAddress = "";
        entryUsername = "";
        entryPassword = ""; 
    }
    
    public void ShowModal()
    {
        isVisible = true; 
        StateHasChanged();
    }

    private void HideModal()
    {
        isVisible = false; 
        entryName = string.Empty;
        entryAddress = string.Empty;
        entryUsername = string.Empty;
        entryPassword = string.Empty;
        
        StateHasChanged();
    }

    private async Task UpdateLoginEntryAsync()
    {
        var entryToBeUpdated = new LoginEntryDTO
        {
            EntryUsername = entryUsername,
            EntryPassword = entryPassword,
            EntryName = entryName,
            EntryAddress = entryAddress,
        };

        var updatedLoginEntry = await LoginEntryService.UpdateLoginEntryAsync(entryToBeUpdated);
        await OnUpdateEntrySucces.InvokeAsync(updatedLoginEntry); 
        HideModal();
    }

    private async Task DeleteLoginEntryAsync()
    {
        var isDeleted = await LoginEntryService.DeleteLoginEntryAsync(selectedLoginEntry); 
        await onDeleteEntrySuccess.InvokeAsync(); 
    }
}