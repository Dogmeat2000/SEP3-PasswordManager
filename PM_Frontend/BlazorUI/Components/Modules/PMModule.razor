@using ServiceLayer.Services
@using Shared.CommunicationObjects
@using Shared.Dtos
@inject IServiceLayer ServiceLayer

<EditLoginEntryModal @ref="editLoginEntryModal" SelectedEntry="selectedEntry"/>

@code {
    // Edit and delete attributes
    private LoginEntryDTO? selectedEntry; 
    private EditLoginEntryModal? editLoginEntryModal; 
    [Parameter]
    public string masterUsername { get; set; } = "user0"; // Default value if none is provided.
    private string generatedPassword = string.Empty;

    private bool isCreateModalOpen = false;

    private List<LoginEntryDTO> socialMediaEntries = new();
    private List<LoginEntryDTO> bankEntries = new();
    private List<LoginEntryDTO> otherEntries = new();
    private MarkupString loadExceptionMsg = new();
    
    protected override async Task OnInitializedAsync() {
        await LoadEntries();
    }
    
    [Parameter]
    public EventCallback OnLoginSuccess { get; set; }

    private async Task HandleLogin()
    {

        await OnLoginSuccess.InvokeAsync();
    }

    private async Task LoadEntries() {
        int retryCount = 3;
        int counter = 0;
        while (counter < retryCount) {
            ServerResponse? response;
            try {
                loadExceptionMsg = (MarkupString)("");
                response = await ServiceLayer.ReadLoginEntriesAsync(new MasterUserDTO(112, "TestUsername", "TestPassword")); // TODO: Apply the logged-in userDTO here instead.
        
                if (response is { statusCode: 200, dto: LoginEntryListDTO { loginEntries.Count: > 0 } entries }) {
                    IEnumerable<LoginEntryDTO> enumerableEntries = entries.loginEntries;
                    // Categorize entries to "Social Media" category:
                    socialMediaEntries = enumerableEntries.Where(e => e.EntryCategory == "Social Media").ToList(); //TODO: These names should not be hard-coded. They should be read from the DB list of Categories.
                    foreach (var loginEntryDto in socialMediaEntries)
                        entries.RemoveLoginEntry(loginEntryDto); //Remove already assigned entries, so any remainders can be caught later and added to "Others" category.
                    
                    // Categorize entries to "Bank - Pension - Insurance" category:
                    bankEntries = enumerableEntries.Where(e => e.EntryCategory == "Bank - Pension - Insurance").ToList(); //TODO: These names should not be hard-coded. They should be read from the DB list of Categories.
                    foreach (var loginEntryDto in bankEntries)
                        entries.RemoveLoginEntry(loginEntryDto); //Remove already assigned entries, so any remainders can be caught later and added to "Others" category.

                    // Categorize remaining entries to "Others" category:
                    foreach (var loginEntryDto in entries.loginEntries)
                        otherEntries.Add(loginEntryDto);
                    
                    counter += 100000;
                    StateHasChanged();
                }
            } catch (Exception e) {
                Console.WriteLine("[LoginEntryListViewModule.razor] Exception occurred while querying for all loginEntries. Reason: " + e.Message);
                loadExceptionMsg = (MarkupString)("<b>Error:</b> Exception occurred while loading login entries." +
                                                  "<br><br>" +
                                                  "<b>Type:</b> " + e.GetType() + 
                                                  "<br><br><b>Reason:</b> " + e.Message);
                counter++;
                Thread.Sleep(250);
            }
        }
    }

    private void OpenCreateModal() {
        isCreateModalOpen = true;
        StateHasChanged(); 
    }

    private void CloseCreateModal()
    {
        isCreateModalOpen = false;
        StateHasChanged(); 
    }
    

    private async Task HandleCreate()
    {
        await LoadEntries();
        //CloseCreateModal();
        StateHasChanged(); 
    }
    
    private void GeneratePassword()
    {
        generatedPassword = GenerateRandomPassword();
        StateHasChanged();
    }

    private string GenerateRandomPassword()
    {
        const string chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*";
        var random = new Random();
        return new string(Enumerable.Repeat(chars, 12)
            .Select(s => s[random.Next(s.Length)]).ToArray());
    }

    private void ShowEditLoginEntryModal()
    {
        if (editLoginEntryModal != null)
        {
            editLoginEntryModal.ShowModal();
        }
        else
        {
            Console.WriteLine("editLoginEntryModal er null");
        }
    }
    
    private void OnEntrySingleClicked(LoginEntryDTO entry)
    {
        selectedEntry = entry;
        Console.WriteLine("Entry selected with single click: " + entry.EntryName);
    }

    private void OnEntryDoubleClicked(LoginEntryDTO entry)
    {
        selectedEntry = entry;
        ShowEditLoginEntryModal();
    }

}

<div class="card shadow mb-5 bg-white rounded" style="width: 100%; margin: 0 auto;">
    <div class="card-header text-white p-3" style="background-color: #00517D;">
        Password Manager
    </div>

    <div class="d-flex justify-content-start align-items-center p-3" style="background-color: #007bc7; border-color: var(--color-primary-dark); border-bottom: 2px solid;">
        <button class="btn btn-sm btn-outline-light me-3" @onclick="GeneratePassword">Generate Password</button>
        <span class="text-white ms-2">@generatedPassword</span>
    </div>

    <div class="d-flex">
        <div class="p-4" style="width: 200px; background-color: #007bc7; color: white;">
            <div class="mb-4">
                Welcome @masterUsername!
            </div>
            
            <button class="btn bg-white mb-3 btn-sm" style="width: 100%;" @onclick="OpenCreateModal">Create Entry</button>
            <button class="btn bg-white mb-3 btn-sm" style="width: 100%;" @onclick="ShowEditLoginEntryModal" disabled="@((selectedEntry == null))">Edit Entry</button>
        </div>

        <div class="flex-grow-1">
            <!-- Only shows a Category, if there exists any login-entries in said category -->
            @if (socialMediaEntries.Count > 0) {
                <LoginEntryListViewModule Entries="socialMediaEntries" Category="Social Media" OnEntrySingleClicked="OnEntrySingleClicked" OnEntryDoubleClicked="OnEntryDoubleClicked"/>
            }

            @if (bankEntries.Count > 0) {
                <LoginEntryListViewModule Entries="bankEntries" Category="Bank - Pension - Insurance" OnEntrySingleClicked="OnEntrySingleClicked" OnEntryDoubleClicked="OnEntryDoubleClicked"/>
            }

            <!-- Always shows the Other Category, even though no login entries are found -->
            <LoginEntryListViewModule Entries="otherEntries" Category="Other" OnEntrySingleClicked="OnEntrySingleClicked" OnEntryDoubleClicked="OnEntryDoubleClicked"/>

            @if (loadExceptionMsg.ToString().Length > 0) {
                <div class="error-box">
                    <p>@loadExceptionMsg</p>
                </div>
            }
        </div>
    </div>
</div>

@if (isCreateModalOpen) {
    <CreateEntryModule OnCreate="HandleCreate" />
}

@if (isCreateModalOpen) {
<CreateEntryModule OnCancel="CloseCreateModal" />
}
