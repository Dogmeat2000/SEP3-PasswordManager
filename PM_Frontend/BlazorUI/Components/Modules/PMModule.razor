@using ServiceLayer.Services
@using Shared.CommunicationObjects
@using Shared.Dtos
@inject IServiceLayer ServiceLayer

<EditLoginEntryModal @ref="editLoginEntryModal" SelectedEntry="selectedEntry"/>

@code {
    // Edit and delete attributes
    private LoginEntryDTO? selectedEntry; 
    private EditLoginEntryModal? editLoginEntryModal; 
    
    private string masterUsername = "user0";
    private string generatedPassword = string.Empty;

    private bool isCreateModalOpen = false;

    private List<LoginEntryDTO> socialMediaEntries = new();
    private List<LoginEntryDTO> bankEntries = new();
    private List<LoginEntryDTO> otherEntries = new();
    
    protected override async Task OnInitializedAsync() {
        await LoadEntries();
    }

    
    private void TestData() {
        socialMediaEntries.Add(new LoginEntryDTO(1, "TestEntryUserName1", "TestPswd1", 109, "Social Media", "Discord", "https://discord.com"));
        bankEntries.Add(new LoginEntryDTO(2, "TestEntryUserName2", "TestPswd1", 109, "Bank - Pension - Insurance", "ItsLearning", "https://itsLearning.dk"));
        otherEntries.Add(new LoginEntryDTO(3, "TestEntryUserName3", "TestPswd1", 109, "Other", "Folketinget", "https://folketinget.dk"));
    }
    

    private async Task LoadEntries() {
        try { 
        ServerResponse response = await ServiceLayer.ReadLoginEntriesAsync(new MasterUserDTO()); // TODO: Apply the logged-in userDTO here instead.
        
            if (response.statusCode == 200 
                && response.dto is LoginEntryListDTO entries
                && entries.loginEntries != null
                && entries.loginEntries.Count > 0) {
            
                IEnumerable<LoginEntryDTO> enumerableEntries = entries.loginEntries;
                socialMediaEntries = enumerableEntries.Where(e => e.EntryCategory == "Social Media").ToList(); //TODO: These names should not be hard-coded. They should be read from the DB list of Categories.
                bankEntries = enumerableEntries.Where(e => e.EntryCategory == "Bank - Pension - Insurance").ToList(); //TODO: These names should not be hard-coded. They should be read from the DB list of Categories.
                otherEntries = enumerableEntries.Where(e => e.EntryCategory == "Other").ToList(); //TODO: These names should not be hard-coded. They should be read from the DB list of Categories.
                StateHasChanged();
            }
        } catch (Exception e) {
            // TODO: Improve exceptionhandling. Currently just placeholder, so blazor app can be launched elsewhere while implementing backend.
            Console.WriteLine("[LoginEntryListViewModule.razor] Exception occurred while querying for all loginEntries. Reason: " + e.Message);
        }
        
        // TODO: Delete below:
        TestData();
        StateHasChanged();
    }

    private void OpenCreateModal() {
        isCreateModalOpen = true;
        StateHasChanged(); 
    }

    private void CloseCreateModal()
    {
        isCreateModalOpen = false;
        StateHasChanged(); 
    }
    

    private async Task HandleCreate(LoginEntryDTO newEntry)
    {
        await ServiceLayer.CreateLoginEntryAsync(newEntry);
        await LoadEntries();
        CloseCreateModal();
        StateHasChanged(); 
    }
    
    private void GeneratePassword()
    {
        generatedPassword = GenerateRandomPassword();
        StateHasChanged();
    }

    private string GenerateRandomPassword()
    {
        const string chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*";
        var random = new Random();
        return new string(Enumerable.Repeat(chars, 12)
            .Select(s => s[random.Next(s.Length)]).ToArray());
    }

    private void ShowEditLoginEntryModal()
    {
        if (editLoginEntryModal != null)
        {
            editLoginEntryModal.ShowModal();
        }
        else
        {
            Console.WriteLine("editLoginEntryModal er null");
        }
    }
    
    private void OnEntrySingleClicked(LoginEntryDTO entry)
    {
        selectedEntry = entry;
        Console.WriteLine("Entry selected with single click: " + entry.EntryName);
    }

    private void OnEntryDoubleClicked(LoginEntryDTO entry)
    {
        selectedEntry = entry;
        ShowEditLoginEntryModal();
    }

}

<div class="card shadow mb-5 bg-white rounded" style="width: 100%; margin: 0 auto;">
    <div class="card-header text-white p-3" style="background-color: #00517D;">
        Password Manager
    </div>

    <div class="d-flex justify-content-start align-items-center p-3" style="background-color: #007bc7; border-color: var(--color-primary-dark); border-bottom: 2px solid;">
        <button class="btn btn-sm btn-outline-light me-3" @onclick="GeneratePassword">Generate Password</button>
        <span class="text-white ms-2">@generatedPassword</span>
    </div>

    <div class="d-flex">
        <div class="p-4" style="width: 200px; background-color: #007bc7; color: white;">
            <div class="mb-4">
                Welcome @masterUsername!
            </div>
            
            <button class="btn bg-white mb-3 btn-sm" style="width: 100%;" @onclick="OpenCreateModal">Create Entry</button>
            <button class="btn bg-white mb-3 btn-sm" style="width: 100%;" @onclick="ShowEditLoginEntryModal" disabled="@((selectedEntry == null))">Edit Entry</button>
        </div>

        <div class="flex-grow-1">
            <LoginEntryListViewModule Entries="socialMediaEntries" Category="Social Media" OnEntrySingleClicked="OnEntrySingleClicked" OnEntryDoubleClicked="OnEntryDoubleClicked"/>
            <LoginEntryListViewModule Entries="bankEntries" Category="Bank - Pension - Insurance" OnEntrySingleClicked="OnEntrySingleClicked" OnEntryDoubleClicked="OnEntryDoubleClicked"/>
            <LoginEntryListViewModule Entries="otherEntries" Category="Other" OnEntrySingleClicked="OnEntrySingleClicked" OnEntryDoubleClicked="OnEntryDoubleClicked"/>
        </div>
    </div>
</div>

@if (isCreateModalOpen)
{
    <CreateEntryModule OnCreate="HandleCreate" />
}
