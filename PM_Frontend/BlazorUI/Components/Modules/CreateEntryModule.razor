@using System.Security.Claims
@using ServiceLayer.Services
@using Shared.Dtos
@using Shared.CommunicationObjects
@inject IServiceLayer ServiceLayer
@code {
    [CascadingParameter] public Task<AuthenticationState> State { get; set; }
    private string entryName = string.Empty;
    private string entryAddress = string.Empty;
    private string entryUsername = string.Empty;
    private string entryPassword = string.Empty;
    private string category = string.Empty;
    private int masterUserId; //TODO: Set to use the logged in users id
    private bool isSubmitting = false;
    private string? errorMessage = null;
    private string? confirmationMessage = null;
    
    protected override async Task OnInitializedAsync()
    {
        AuthenticationState authenticationState = await State;
        ClaimsPrincipal claimsPrincipal = authenticationState.User;
        if(claimsPrincipal.Identity is null || !claimsPrincipal.Identity.IsAuthenticated)
        {
            // the user is not logged in
            return;
        }
        IEnumerable<Claim> claims = claimsPrincipal.Claims;
        string userIdAsString = claims.Single(c => c.Type == "MasterUserId").Value;
        masterUserId = int.Parse(userIdAsString);
    }

    [Parameter]
    public EventCallback<LoginEntryDTO> OnCreate { get; set; }

    [Parameter]
    public EventCallback OnCancel { get; set; }

    private async Task CreateEntry()
    {
        isSubmitting = true;
        errorMessage = null;
        confirmationMessage = null;
        
        // Validation: Ensure all fields are filled
        if (string.IsNullOrWhiteSpace(entryName) ||
            string.IsNullOrWhiteSpace(entryAddress) ||
            string.IsNullOrWhiteSpace(entryUsername) ||
            string.IsNullOrWhiteSpace(entryPassword) ||
            string.IsNullOrWhiteSpace(category))
        {
            errorMessage = "All fields must be filled before creating an entry.";
            isSubmitting = false;
            return;
        }

        if (!entryAddress.Contains("https://") || !entryAddress.Contains("http://"))
        {
            entryAddress = "https://" + entryAddress;
        }
        var newEntry = new LoginEntryDTO
        {
            EntryName = entryName,
            EntryAddress = entryAddress,
            EntryUsername = entryUsername,
            EntryPassword = entryPassword,
            EntryCategory = category,
            MasterUserId = masterUserId
            
        };

        
        {
            
        }
        try
        {
            // Call the service layer to create the entry in the database and receive a ServerResponse
            ServerResponse response = await ServiceLayer.CreateLoginEntryAsync(newEntry);

            // Check the status code in the ServerResponse
            if (response.statusCode == 201)
            {
                confirmationMessage = "Entry created successfully!";
                
                // Optionally, invoke the OnCreate callback to notify the parent component
                await OnCreate.InvokeAsync();

                // Clear the form fields
                entryName = string.Empty;
                entryAddress = string.Empty;
                entryUsername = string.Empty;
                entryPassword = string.Empty;
                category = string.Empty;

                // Automatically close the modal after a brief delay if desired
                // await Task.Delay(1000); // Uncomment to add delay
                await CloseCreateModal();
            }
            else
            {
                // Display the server's error message if status code is not successful
                errorMessage = response.message ?? "An error occurred while creating the entry.";
            }
        }
        catch (Exception ex)
        {
            // Handle unexpected errors
            errorMessage = "Failed to create entry: " + ex.Message;
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private async Task CloseCreateModal()
    {
        await OnCancel.InvokeAsync();
        StateHasChanged();
    }
}

<div class="modal fade show d-block" tabindex="-1" style="background: rgba(0, 0, 0, 0.5);">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Create Entry</h5>
                <button type="button" class="close" @onclick="CloseCreateModal">&times;</button>
            </div>
            <div class="modal-body">
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger">@errorMessage</div>
                }
                @if (!string.IsNullOrEmpty(confirmationMessage))
                {
                    <div class="alert alert-success">@confirmationMessage</div>
                }
                <div class="form-group">
                    <label for="entryName">Name</label>
                    <input type="text" id="entryName" class="form-control" @bind="entryName" />
                </div>
                <div class="form-group">
                    <label for="entryAddress">Website</label>
                    <input type="text" id="entryAddress" class="form-control" @bind="entryAddress" />
                </div>
                <div class="form-group">
                    <label for="entryUsername">Username</label>
                    <input type="text" id="entryUsername" class="form-control" @bind="entryUsername" />
                </div>
                <div class="form-group">
                    <label for="entryPassword">Password</label>
                    <input type="password" id="entryPassword" class="form-control" @bind="entryPassword" />
                </div>
                <div class="form-group">
                    <label for="category">Category</label>
                    <select id="category" class="form-control" @bind="category">
                        <option>Select</option>
                        <option>Social Media</option>
                        <option>Bank - Pension - Insurance</option>
                        <option>Other</option>
                    </select>
                </div>
            </div>
            <div class="modal-footer">
                <button class="btn btn-secondary" @onclick="CloseCreateModal" disabled="@isSubmitting">Cancel</button>
                <button class="btn btn-primary" @onclick="CreateEntry" disabled="@isSubmitting">Add</button>
            </div>
        </div>
    </div>
</div>
