@using ServiceLayer.Services
@using Shared.Dtos
@inject IServiceLayer ServiceLayer

@code {
    private string masterUsername = string.Empty;
    private string masterPassword = string.Empty;
    private string generatedPassword = string.Empty;
    private string message = string.Empty;

    [Parameter]
    public EventCallback OnLoginSuccess { get; set; }

    private async Task HandleLogin()
    {
      
        await OnLoginSuccess.InvokeAsync(); 
    }

    private async Task PerformLogin()
    {
        await OnLoginSuccess.InvokeAsync();
    }

    private void GeneratePassword()
    {
        generatedPassword = GenerateRandomPassword();
    }

    private string GenerateRandomPassword()
    {
        const string chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*";
        var random = new Random();
        return new string(Enumerable.Repeat(chars, 12)
            .Select(s => s[random.Next(s.Length)]).ToArray());
    }

    private async Task Login()
    {
        var loginDto = new MasterUserDTO
        {
            masterUsername = masterUsername,
            masterPassword = masterPassword
        };

        try
        {
            var response = await ServiceLayer.ReadMasterUserAsync(loginDto);
            if (response.statusCode == 200)
            {
                message = "Login successful!";
                await PerformLogin();
            }
            else
            {
                message = "Login failed: " + response.message;
            }
        }
        catch (Exception ex)
        {
            message = "Error: " + ex.Message;
        }
    }

    private async Task CreateUser()
    {
        var createDto = new MasterUserDTO
        {
            masterUsername = masterUsername,
            masterPassword = masterPassword
        };

        try
        {
            var response = await ServiceLayer.CreateMasterUserAsync(createDto);
            if (response != null && response.statusCode == 201)
            {
                message = "User created successfully!";
            }
            else
            {
                message = "Failed to create user. Please try again.";
            }
        }
        catch (Exception ex)
        {
            message = "Error creating user: " + ex.Message;
        }
    }
}

<div class="card shadow p-3 mb-5 bg-white rounded" style="width: 500px; margin: 0 auto;">
    <div class="card-header text-white" style="background-color: #00517D;">
        Password Manager Login
    </div>

    < class="card-body">
        <input type="text" class="form-control mb-3" placeholder="Username" @bind="masterUsername" />
        <input type="password" class="form-control mb-3" placeholder="Password" @bind="masterPassword" />
        <button class="btn btn-primary" @onclick="Login">Login</button>
        <button class="btn btn-secondary ms-2" @onclick="CreateUser">Create User</button>
    <!-- TODO:   <button class="btn btn-success mt-3" @onclick="GeneratePassword">Generate Password</button>    -->

    <div class="mt-3">
        <p>@message</p>
    </div>
</div>
